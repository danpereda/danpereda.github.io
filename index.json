[{"authors":["admin"],"categories":null,"content":"I am a Data Scientist trying to keep up with the state of the art on the different areas of AI from tabular data algorithms to Computer Vision and Physics informed neural networks.\nI\u0026rsquo;m the creator of TensorFlow Santiago comunity, that is now oficially part of Google\u0026rsquo;s TFUG communities. Because of this, if you have any project that can make a positive impact send me an email, we might be able to get you some Google Cloud resources to run your models.\nI\u0026rsquo;m also a member of ICOVID Chile which is a group created by the universities of Chile, Católica and Concepción whose general purpose is to generate key indicators that best represent the situation of the SARS-CoV-2 pandemic.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://danpereda.github.io/author/daniel-pereda/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/daniel-pereda/","section":"authors","summary":"I am a Data Scientist trying to keep up with the state of the art on the different areas of AI from tabular data algorithms to Computer Vision and Physics informed neural networks.","tags":null,"title":"Daniel Pereda","type":"authors"},{"authors":[],"categories":[],"content":"Introduction We will first lean how to use our webcam video as an input for a Hand tracking model, and we will modularize it in order to make it easy to use in other projects. As a test, we will build a volume gesture controller, such that we can control the volume of our computer using hand gestures. The result will be will like this (but in real time).\n\r\rVolume Gesture Controller + Hand tracking\r\r\rThe learning material as well as the project idea can be found mainly in computervision.zone, mediapipe and opencv. The main difference is that I will be exploring and explaining step by step from the deep learning model to the coding.\nTable of contents  Setting up environment. Basics: Read the webcam. Hand Detection and Tracking using Mediapipe  Mediapipe Hands Model. Palm Detection Model. Hand Landmark Model. Coding it. Modularize.   Volume Gesture Controller using Hand Tracking module  Setting up environment Install the requirements\npip install opencv-contrib-python pip install mediapipe  Basics: Read the camera import cv2 # opencv import sys # Python Standard Library System-specific parameters and functions # if we have more than one camera, we select one with the variable s s = 0 if len(sys.argv) \u0026gt; 1: s = sys.argv[1] # Define camera we are going to read source = cv2.VideoCapture(s) # Create a window for the camera win_name = \u0026quot;Camera Preview: ESC to exit\u0026quot; cv2.namedWindow(win_name, cv2.WINDOW_NORMAL) # While we don't press the \u0026quot;ESC\u0026quot; key the window will remain open # and we will show the frame in the window previously defined while cv2.waitKey(1) != 27: success, frame = source.read() # if we don't read the image successfully break the loop if not success: break # Otherwise show the frame on the window cv2.imshow(win_name, frame) # Since we exit the loop, its time to clean resources source.release() cv2.destroyWindow(win_name)  Hand Detection and Tracking using Mediapipe I will give a brief description on the Mediapipe models and focus on how to use them together with opencv. Also, I will be using images and videos from the documentation at Google Mediapipe\nMediapipe Hands Model MediaPipe Hands is a high-fidelity hand and finger tracking solution. It employs machine learning (ML) to infer 21 3D landmarks of a hand from just a single frame. Its ML Pipeline consists of multiple models working together. A palm detection model that operates on the full image and returns an oriented hand bounding box. A hand landmark model that operates on the cropped image region defined by the palm detector and returns high-fidelity 3D hand keypoints. In addition, in the pipeline the crops can also be generated based on the hand landmarks identified in the previous frame, and only when the landmark model could no longer identify hand presence is palm detection invoked to relocalize the hand.\nFig.1 - Tracked 3D hand landmarks are represented by dots in different shades, with the brighter ones denoting landmarks closer to the camera. Palm Detection Model The first step will be detecting a palm, since estimating bounding boxes of rigid objects like palms and fists is significantly simpler than detecting hands with articulated fingers. For this task, a single-shot detector has been used (\rSSD: Single Shot MultiBox Detector Paper). In addition, as palms are smaller objects and the single-shot detector will create many boxes, some technique to select the correct entity must be used, for this problem the non-maximum supression algorithm works well even for two-hand-self-occlusion cases, like handshakes. Moreover, palms can be modelled using square bounding boxes (anchors in ML terminology) ignoring other aspect ratios, and therefore reducing the number of anchors by a factor of 3-5. Second, an encoder-deocoder feature extractor is used for bigger scene context awareness even for small objects.\nThe average precision of this palm detection model is 95.7%.\nNote on The Non Maximum Supression (NMS) algorithm : is a technique used in many computer vision algorithms. It is a class of algorithms to select one entity (e.g. bounding boxes) out of many overlapping entities. The selection criteria can be chosen to arrive at particular results. Most commonly, the criteria is some form of probability number along with some form of overlap measure (e.g. IOU). read more about it here\nNMS Finally we can see the computation graph of the model.\n\r\rPalm detection graph\r\r\rHand Landmark Model After the palm detection over the whole image, the hand landmark model performs precise keypoint localization of 21 3D hand-knuckle coordinates inside the detected hand regions via regression, that is direct coordinate prediction. The model learns a consistent internal hand pose representation and is robust even to partially visible hands and self-occlusions.\nFig.2 - Hand Landmarks Fig.3 - Top: Aligned hand crops passed to the tracking network with ground truth annotation. Bottom: Rendered synthetic hand images with ground truth annotation. We can see the computation graph here.\n\r\rHand Tracking Graph\r\r\rCoding it First lets take a look at the Hands class provided by Mediapipe to check what we need. For instance, as opencv reads images in BGR format, we need to check if this class needs an RGB one.\nclass Hands(SolutionBase): \u0026quot;\u0026quot;\u0026quot;MediaPipe Hands. MediaPipe Hands processes an RGB image and returns the hand landmarks and handedness (left v.s. right hand) of each detected hand. Note that it determines handedness assuming the input image is mirrored, i.e., taken with a front-facing/selfie camera ( https://en.wikipedia.org/wiki/Front-facing_camera) with images flipped horizontally. If that is not the case, use, for instance, cv2.flip(image, 1) to flip the image first for a correct handedness output. Please refer to https://solutions.mediapipe.dev/hands#python-solution-api for usage examples. \u0026quot;\u0026quot;\u0026quot; def __init__(self, static_image_mode=False, max_num_hands=2, min_detection_confidence=0.5, min_tracking_confidence=0.5): \u0026quot;\u0026quot;\u0026quot;Initializes a MediaPipe Hand object. Args: static_image_mode: Whether to treat the input images as a batch of static and possibly unrelated images, or a video stream. See details in https://solutions.mediapipe.dev/hands#static_image_mode. max_num_hands: Maximum number of hands to detect. See details in https://solutions.mediapipe.dev/hands#max_num_hands. min_detection_confidence: Minimum confidence value ([0.0, 1.0]) for hand detection to be considered successful. See details in https://solutions.mediapipe.dev/hands#min_detection_confidence. min_tracking_confidence: Minimum confidence value ([0.0, 1.0]) for the hand landmarks to be considered tracked successfully. See details in https://solutions.mediapipe.dev/hands#min_tracking_confidence. \u0026quot;\u0026quot;\u0026quot; def process(self, image: np.ndarray) -\u0026gt; NamedTuple: \u0026quot;\u0026quot;\u0026quot;Processes an RGB image and returns the hand landmarks and handedness of each detected hand. Args: image: An RGB image represented as a numpy ndarray. Raises: RuntimeError: If the underlying graph throws any error. ValueError: If the input image is not three channel RGB. Returns: A NamedTuple object with two fields: a \u0026quot;multi_hand_landmarks\u0026quot; field that contains the hand landmarks on each detected hand and a \u0026quot;multi_handedness\u0026quot; field that contains the handedness (left v.s. right hand) of the detected hand. \u0026quot;\u0026quot;\u0026quot;  From here we see a few things:\n We will have to convert the image using cv2.cvtColor(img,cv2.COLOR_BGR2RGB) To define a Hands object we need to access to mediapipe.solutions.hands.Hands(*Args) We need to call the process function to run the inference model in our image, and get the results by calling .multi_hand_landmarks.  With this we will have our results as coordinates, as we saw in the Hand Landmark Model section there are 21 landmark points so there must be some function to automatically draw the landmarks and the conections between them right? Indeed, if we check mediapipe.solutions.drawing_utils we can see the following method.\ndef draw_landmarks( image: np.ndarray, landmark_list: landmark_pb2.NormalizedLandmarkList, connections: Optional[List[Tuple[int, int]]] = None, landmark_drawing_spec: DrawingSpec = DrawingSpec(color=RED_COLOR), connection_drawing_spec: DrawingSpec = DrawingSpec()): \u0026quot;\u0026quot;\u0026quot;Draws the landmarks and the connections on the image. Args: image: A three channel RGB image represented as numpy ndarray. landmark_list: A normalized landmark list proto message to be annotated on the image. connections: A list of landmark index tuples that specifies how landmarks to be connected in the drawing. landmark_drawing_spec: A DrawingSpec object that specifies the landmarks' drawing settings such as color, line thickness, and circle radius. connection_drawing_spec: A DrawingSpec object that specifies the connections' drawing settings such as color and line thickness. Raises: ValueError: If one of the followings: a) If the input image is not three channel RGB. b) If any connetions contain invalid landmark index. \u0026quot;\u0026quot;\u0026quot;  Now we are ready to run code it, lets get an image from our webcam, run the inferece model on it an finally draw the landmarks and conections.\nimport cv2 import sys import mediapipe as mp s = 0 if len(sys.argv) \u0026gt; 1: s = sys.argv[1] source = cv2.VideoCapture(s) win_name = \u0026quot;Camera Preview: ESC to exit\u0026quot; cv2.namedWindow(win_name, cv2.WINDOW_NORMAL) mp_hands = mp.solutions.hands hands = mp_hands.Hands() mp_draw = mp.solutions.drawing_utils while cv2.waitKey(1) != 27: success, frame = source.read() if not success: break imgRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # To improve performance, optionally mark the image as not writeable to # pass by reference. imgRGB.flags.writeable = False # Run inference model on the RGB image results = hands.process(imgRGB) # We will like to know the hand_landmarks of all hands detected if results.multi_hand_landmarks: for hand_landmark in results.multi_hand_landmarks: mp_draw.draw_landmarks(frame, hand_landmark, mp_hands.HAND_CONNECTIONS) cv2.imshow(win_name, frame) source.release() cv2.destroyWindow(win_name)  Now lets say we want to access some specific landmarks, can we do it? the answer is yes, we can get the ID and relative coordinates (x,y) accesing to the .landmark method.\nIn the following code I draw some special circles on the landmarks 4 and 20 (see picture in Hand Landmark Model) and added some Frames per second count on the top left corner.\n\r\rHand Tracking Result\r\r\rimport cv2 import sys import time import mediapipe as mp s = 1 if len(sys.argv) \u0026gt; 1: s = sys.argv[1] source = cv2.VideoCapture(s) win_name = \u0026quot;Camera Preview: ESC to exit\u0026quot; cv2.namedWindow(win_name, cv2.WINDOW_NORMAL) mp_hands = mp.solutions.hands hands = mp_hands.Hands() mp_draw = mp.solutions.drawing_utils # To make FPS count previous_time = time.time() while cv2.waitKey(1) != 27: success, frame = source.read() if not success: break imgRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # To improve performance, optionally mark the image as not writeable to # pass by reference. imgRGB.flags.writeable = False # Run inference model on the RGB image results = hands.process(imgRGB) # We will like to know the hand_landmarks of all hands detected if results.multi_hand_landmarks: for hand_landmark in results.multi_hand_landmarks: # If we want to do things with an specifict landmark for id_landmark, landmark in enumerate(hand_landmark.landmark): # The coordinates of the landmarks are relative to the height and width height, width, channels = frame.shape center_x, center_y = int(landmark.x * width), int(landmark.y * height) if id_landmark == 4: cv2.circle(frame, (center_x, center_y), 15, (255, 0, 255), cv2.FILLED) if id_landmark == 20: cv2.circle(frame, (center_x, center_y), 15, (255, 255, 0), cv2.FILLED) mp_draw.draw_landmarks(frame, hand_landmark, mp_hands.HAND_CONNECTIONS) # Display FPS count current_time = time.time() fps = int(1/(current_time - previous_time)) previous_time = current_time cv2.putText(frame, str(fps), (10,70), cv2.FONT_ITALIC, 3, (255, 0, 255), thickness = 2) cv2.imshow(win_name, frame) source.release() cv2.destroyWindow(win_name)  Modularize all we have learned today As we saw before, we are recycling the same code time over time, for this reason, it will come in handy to modularize what we have done so that we can use it on other projects as well.\nThe module will look like this.\nimport cv2 import time import mediapipe as mp class handDetector(): def __init__(self, static_image_mode=False, max_num_hands=2, min_detection_confidence=0.5, min_tracking_confidence=0.5): self.static_image_mode = static_image_mode self.max_num_hands = max_num_hands self.min_detection_confidence = min_detection_confidence self.min_tracking_confidence = min_tracking_confidence # Initializing Hand model and drawing utils self.mp_hands = mp.solutions.hands self.hands = self.mp_hands.Hands(self.static_image_mode, self.max_num_hands, self.min_detection_confidence, self.min_tracking_confidence) self.mp_draw = mp.solutions.drawing_utils def findHands(self, img): imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) imgRGB.flags.writeable = False # Run inference model on the RGB image self.results = self.hands.process(imgRGB) if self.results.multi_hand_landmarks: for hand_landmark in self.results.multi_hand_landmarks: self.mp_draw.draw_landmarks(img, hand_landmark, self.mp_hands.HAND_CONNECTIONS) return img def findPosition(self, img, hand_number = 0): landmark_list = [] if self.results.multi_hand_landmarks: hand = self.results.multi_hand_landmarks[hand_number] for id_landmark, landmark in enumerate(hand.landmark): height, width, channels = img.shape center_x, center_y = int(landmark.x * width), int(landmark.y * height) landmark_list.append([id_landmark, center_x, center_y]) return landmark_list # This is for testing in the same module that everything works def main(): source = cv2.VideoCapture(1) win_name = \u0026quot;Camera Preview: ESC to exit\u0026quot; cv2.namedWindow(win_name, cv2.WINDOW_NORMAL) detector = handDetector() previous_time = time.time() while cv2.waitKey(1) != 27: success, frame = source.read() if not success: break img = detector.findHands(frame) landmark_list = detector.findPosition(img) if len(landmark_list) != 0: print(landmark_list[4]) # Display FPS count current_time = time.time() fps = int(1 / (current_time - previous_time)) previous_time = current_time cv2.putText(frame, str(fps), (10, 70), cv2.FONT_ITALIC, 3, (255, 0, 255), thickness=2) cv2.imshow(win_name, img) source.release() cv2.destroyWindow(win_name) if __name__ == '__main__': main()  Then if we want to use it we just do the following:\nimport cv2 import mediapipe as mp import HandTrackingModule source = cv2.VideoCapture(1) win_name = \u0026quot;Camera Preview: ESC to exit\u0026quot; cv2.namedWindow(win_name, cv2.WINDOW_NORMAL) detector = HandTrackingModule.handDetector() while cv2.waitKey(1) != 27: success, frame = source.read() if not success: break img = detector.findHands(frame) cv2.imshow(win_name, img) source.release() cv2.destroyWindow(win_name)  Volume Gesture Controller We have a hand tracking module already done, so let\u0026rsquo;s say we want to control the volume of our computer by moving the thumb and index finger closer and further away from each other. From before we now the thumb is landmark number 4 and the index is landmark number 8.\nNow we can think on creating a straight line between the landmark 4 and 8, and computing its length which will be proportional to the volume. We need to be careful with the following, the length of this line might not be 0 even when we have our fingers touching each other, because the landmark points are not on the edge and we don\u0026rsquo;t know what is the distance in pixels when they are the farthest away from each other, therefore we will have to print the length and create a UPPER_BOUND and LOWER_BOUND based on this, second, the volume range that our package will can be 0 to 100, but it can also be something else, in any case we need to map our [LOWER_BOUND, UPPER_BOUND] interval into [MIN_VOL, MAX_VOL].\nFinally, just to make it look prettier, we will add draw a circle in the middle point that will change color when both fingers are super close to each other and a volume bar to the left of the screen.\nVolume Controller Package We will use pycaw as it is pretty straightforward to use from the github repository we can see the following:\nfrom ctypes import cast, POINTER from comtypes import CLSCTX_ALL from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume devices = AudioUtilities.GetSpeakers() interface = devices.Activate( IAudioEndpointVolume._iid_, CLSCTX_ALL, None) volume = cast(interface, POINTER(IAudioEndpointVolume)) volume.GetMute() volume.GetMasterVolumeLevel() volume.GetVolumeRange() volume.SetMasterVolumeLevel(-20.0, None)  From here we can see that the first lines are initialization of the devices and creating a volume object, this one has some methods, from which we are interested in the last two, GetVolumeRange() and SetMasterVolumeLevel(-20.0, None).\nFinishing it! Our final code will look like this:\nimport cv2 import sys import numpy as np import time from ctypes import cast, POINTER from comtypes import CLSCTX_ALL from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume import HandTrackingModule as htm s = 0 if len(sys.argv) \u0026gt; 1: s = sys.argv[1] # Define width and height of the webcam width_cam, height_cam = 1280, 720 # Define camera we are going to read source = cv2.VideoCapture(s) source.set(3, width_cam) # Property number 3 : width source.set(4, height_cam) # Property number 4: height # Create a window for the camera win_name = \u0026quot;Camera Preview: ESC to exit\u0026quot; cv2.namedWindow(win_name, cv2.WINDOW_NORMAL) previous_time = 0 # Initialize detector detector = htm.handDetector(max_num_hands=1, min_tracking_confidence=0.7, min_detection_confidence=0.7) # Initialize Audio devices devices = AudioUtilities.GetSpeakers() interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None) volume = cast(interface, POINTER(IAudioEndpointVolume)) # Get Volume Range volume_range = volume.GetVolumeRange() MIN_VOLUME, MAX_VOLUME = volume_range[0], volume_range[1] # Define constants UPPER_BOUND = 300 LOWER_BOUND = 30 vol_bar = 400 vol_per = 0 while cv2.waitKey(1) != 27: success, frame = source.read() # if we don't read the image successfully break the loop if not success: break img = detector.findHands(frame) landmark_list = detector.findPosition(img) if len(landmark_list) != 0: thumb_x, thumb_y = landmark_list[4][1], landmark_list[4][2] index_x, index_y = landmark_list[8][1], landmark_list[8][2] # Middle point of the line connecting the thumb and index fingers cx, cy = (thumb_x + index_x) // 2, (thumb_y + index_y) // 2 cv2.circle(img, (thumb_x, thumb_y), 10, (255, 0, 255), cv2.FILLED) cv2.circle(img, (index_x, index_y), 10, (255, 0, 255), cv2.FILLED) cv2.circle(img, (cx, cy), 15, (255, 0, 255), cv2.FILLED) cv2.line(img, (thumb_x, thumb_y), (index_x, index_y), (255, 0, 255), 3) # Check the legnth of the line to define the UPPER and LOWER bounds # Then when we are in the UPPER bound = 100% Volumne line_length = np.hypot(index_x - thumb_x, index_y - thumb_y) # Map range [30, 320] to [MIN_VOLUME, MAX_VOLUME] vol = np.interp(line_length, [LOWER_BOUND, UPPER_BOUND], [MIN_VOLUME, MAX_VOLUME]) volume.SetMasterVolumeLevel(vol, None) vol_bar = np.interp(line_length, [LOWER_BOUND, UPPER_BOUND], [400, 150]) vol_per = np.interp(line_length, [LOWER_BOUND, UPPER_BOUND], [0, 100]) if line_length \u0026lt; LOWER_BOUND: cv2.circle(img, (cx, cy), 15, (0, 255, 0), cv2.FILLED) cv2.rectangle(img, (50, 150), (85, 400), (0, 255, 0), 3) cv2.rectangle(img, (50, int(vol_bar)), (85, 400), (0, 255, 0), cv2.FILLED) cv2.putText(img, f\u0026quot;{int(vol_per)}\u0026quot;, (40, 450), cv2.FONT_ITALIC, 1, (0, 255, 0), 2) current_time = time.time() fps = int(1 / (current_time - previous_time)) previous_time = current_time cv2.putText(img, f\u0026quot;FPS: {fps}\u0026quot;, (40, 50), cv2.FONT_ITALIC, 1, (255, 0, 255), 2) cv2.imshow(win_name, frame) # Since we exit the loop, its time to clean resources source.release() cv2.destroyWindow(win_name)  ","date":1624054082,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624054082,"objectID":"9d7c2871852682298f5a86b18db91f33","permalink":"https://danpereda.github.io/post/handtracking/","publishdate":"2021-06-18T18:08:02-04:00","relpermalink":"/post/handtracking/","section":"post","summary":"We will first lean how to use our webcam video as an input for a Hand tracking model, and we will modularize it in order to make it easy to use in other projects. As a test, we will build a volume gesture controller, such that we can control the volume of our computer using hand gestures.","tags":["computer-vision","opencv","mediapipe","DNN","CNN","AI"],"title":"Hand tracking and volume gesture controller","type":"post"},{"authors":[],"categories":[],"content":"Here I will describe a bit about conic programming on Julia based on Juan Pablo Vielma\u0026rsquo;s JuliaCon 2020 talk and JuMP devs Tutorials. We will begin by defining what is a cone and how to model them on JuMP together with some simple examples, by the end we will solve an mixed - integer conic problem of avoiding obstacles by following a polynomial trajectory.\nWhy Conic Optimizacion?\n Linear- programming-like duality Faster and more stable algorithms  Avoid non-differentiability issues, exploit primal-dual form, strong theory on barriers for interior point algorithms. Industry change in 2018:  Knitro version 11.0 adds support for SOCP constraints. Mosek version 9.0 deprecates expression/function-based formulations and focuses on pure conic (linear, SOCP, rotated SOCP, SDP, exp \u0026amp; power)      Table of Contents  What is a Cone? Conic Programming. Some type of Cones supported by JuMP and programming examples.  Second Order - Cone Rotated Second Order - Cone Exponential Cone Positive Semidefinite Cone (PSD) Other Cones and Functions.   Mixed Integer Conic example: Avoiding obstacles (Drone and Flappy bird) Continuous Conic programming on Julia?  What is a Cone? A subset $C$ of a vector space $V$ is a cone if $\\forall x \\in C$ and positive scalars $\\alpha$, the product $\\alpha x \\in C$.\nA cone C is a convex cone if $\\alpha x + \\beta y \\in C$, for any positive scalars $\\alpha, \\beta$, and any $x, y \\in C$.\u0026quot;\nConic Programming Conic programming problems are convex optimization problems in which a convex function is minimized over the intersection of an affine subspace and a convex cone. An example of a conic-form minimization problems, in the primal form is:\n\\begin{equation} \\min_{ x \\in \\mathbb{R}^n} a_0 ^\\top x + b_0 \\end{equation}\nsuch that: $$A_i x + b_i \\in \\mathcal{C}_i \\quad \\text{for } i = 1 \\dotso m$$\nThe corresponding dual problem is:\n$$ \\max_{y_1, \\dotso , y_m} - \\sum_{i = 1}^{m} b_i ^T y_i + b_0$$\nsuch that: $$ a_0 - \\sum_{i = 1}^{m} A_{i}^{T} y_{i} = 0 $$ $$ y_i \\in \\mathcal{C}_i^*$$\nWhere each $\\mathcal{C}_i$ is a closed convex cone and $\\mathcal{C}_i^*$ is its dual cone.\nSome of the Types of Cones supported by JuMP Second - Order Cone The Second - Order Cone (or Lorentz Cone) of dimension $n$ is of the form:\n$$ Q^n = \\{ (t,x) \\in \\mathbb{R}^n: t \\ge \\lVert x \\rVert_2 \\} $$\nA Second - Order Cone rotated by $\\pi/4$ in the $(x_1,x_2)$ plane is called a Rotated Second- Order Cone. It is of the form:\n$$ Q^n_r = \\{ (t,u,x) \\in \\mathbb{R}^n: 2tu \\ge \\lVert x \\rVert_2, t, u \\ge 0 \\} $$\nThese cones are represented in JuMP using MOI sets SecondOrderCone and RotatedSecondOrderCone\nExample: Euclidean Projection on a hyperplane For a given point $u_0$ and a set $K$, we refer to any point $u \\in K$ which is closest to $u_0$ as a projection of $u_0$ on $K$. The projection of a point $u_0$ on a hyperplane $K = \\{ u : p'\\cdot u = q \\}$ is given by:\n$$ \\begin{align} \u0026amp; \\min_{x \\in \\mathbb{R}^n} \u0026amp; \\lVert u - u_0 \\rVert \\\\\n\u0026amp; \\text{s.t. } \u0026amp; p'\\cdot u = q \\end{align}$$\nWe can model the above problem as the following conic program:\n$$ \\begin{align} \u0026amp; \\min \u0026amp; t \\\\\n\u0026amp; \\text{s.t. } \u0026amp; p'\\cdot u = q \\\\\n\u0026amp; \\quad \u0026amp; (t, u - u_0) \\in Q^{n+1} \\end{align}$$\nIf we transform this to the form we saw above,\n$$ \\begin{align} x \u0026amp; = (t,u)\\\\\na_0 \u0026amp; = e_1\\\\\nb_0 \u0026amp; = 0\\\\\nA_1 \u0026amp; =(0,p)\\\\\nb_1 \u0026amp; = -q \\\\\nC_1 \u0026amp; = \\mathbb{R}\\\\\nA_2 \u0026amp; = 1\\\\\nb_2 \u0026amp;= -(0,u_0)\\\\\nC_2 \u0026amp;= Q^{n+1} \\end{align}$$\nThus, we can obtain the dual problem as:\n$$ \\begin{align} \u0026amp; \\max \u0026amp; y_1 + (0,u_0)^\\top y_2 \\\\\n\u0026amp; \\text{s.t. } \u0026amp; e_1 -(0,p)^\\top y_1 - y_2 = 0 \\\\\n\u0026amp; \\quad \u0026amp; y_1 \\in \\mathbb{R}\\\\\n\u0026amp; \\quad \u0026amp; y_2 \\in Q^{n+1} \\end{align}$$\nLet\u0026rsquo;s model this in Julia.\nFirst we need to load some packages JuMP is the modeling package, ECOS is a solver, LinearAlgebra and Random are just to get some linear algebra operations and a fix seed for reproducibility respectively.\nusing JuMP\rusing ECOS\rusing LinearAlgebra\rusing Random\rRandom.seed!(2020);\r Lets get some random values for the problem\u0026rsquo;s input: $u_0$, $p$ and $q$\nu0 = rand(10)\rp = rand(10)\rq = rand();\r Now we can write the model:\nmodel = Model(optimizer_with_attributes(ECOS.Optimizer, \u0026quot;printlevel\u0026quot; =\u0026gt; 0))\r@variable(model, u[1:10])\r@variable(model, t)\r@objective(model, Min, t)\r@constraint(model, [t, (u - u0)...] in SecondOrderCone())\r@constraint(model, u' * p == q)\roptimize!(model)\r \r\rOptimization Result\r\r\rThen we can see the objective function value and variable value at the optimum by doing:\n@show objective_value(model);\r@show value.(u);\r We get an objective value of : $1.4149915748070703$. We can also solve the dual problem:\ne1 = [1.0, zeros(10)...]\rdual_model = Model(optimizer_with_attributes(ECOS.Optimizer, \u0026quot;printlevel\u0026quot; =\u0026gt; 0))\r@variable(dual_model, y1 \u0026lt;= 0.0)\r@variable(dual_model, y2[1:11])\r@objective(dual_model, Max, q * y1 + dot(vcat(0.0, u0), y2))\r@constraint(dual_model, e1 - [0.0, p...] .* y1 - y2 .== 0.0)\r@constraint(dual_model, y2 in SecondOrderCone())\roptimize!(dual_model)\r \r\rOptimization Dual problem\r\r\r@show objective_value(dual_model);\r We get an objective value of : $1.4149916455792486$. The difference between this value and the primal is $ \\approx 7.07 \\times 10^{-8}$, does this makes sense?\nWe can also have an equivalent formulation using a Rotated Second - Order cone:\n$$ \\begin{align} \u0026amp; \\min \u0026amp; t \\\\\n\u0026amp; \\text{s.t. } \u0026amp; p'\\cdot u = q \\\\\n\u0026amp; \\quad \u0026amp; (t, 1/2, u - u_0) \\in Q^{n+2}_r \\end{align}$$\nmodel = Model(optimizer_with_attributes(ECOS.Optimizer, \u0026quot;printlevel\u0026quot; =\u0026gt; 0))\r@variable(model, u[1:10])\r@variable(model, t)\r@objective(model, Min, t)\r@constraint(model, [t, 0.5, (u - u0)...] in RotatedSecondOrderCone())\r@constraint(model, u' * p == q)\roptimize!(model)\r \r\rOptimization Rotated formulation\r\r\rWe notice that the objective function values are different. There is a simple explanation to that behaviour. In the case of Second-Order Cone the objective function is $\\lVert u - u_0 \\rVert _2$ while in the case of a Rotated Second-Order Cone is $\\lVert u - u_0 \\rVert_2^2$. However, the values of $u$ are the same in both problems.\nExponential Cone An exponential Cone is a set of the form:\n$$ K_{\\exp} = \\{ (x,y,z) \\in \\mathbb{R}^3 : y \\cdot \\exp(x/y) \\le z, y \\ge 0 \\}$$\nIt is represented in JuMP using the MOI set ExponentialCone.\nExample: Entropy Maximization We want to maximize the entropy function $ H(x) = - x log (x)$ subject to linear inequality constraints.\n$$ \\begin{align} \u0026amp; \\max \u0026amp; -\\sum_{i=1}^{n} x_ilog(x_i) \\\\\n\u0026amp; \\text{s.t. } \u0026amp; \\mathbf{1}^\\top x = 1\\\\\n\u0026amp; \\quad \u0026amp; Ax \\le b \\end{align}$$\nWe just need to use the following transformation:\n$$ t \\le -xlog(x) \\iff t \\le x log(1/x) \\iff (t,x,1) \\in K_{\\exp}$$\nAn example in Julia would be:\nn = 15;\rm = 10;\rA = randn(m, n);\rb = rand(m, 1);\rmodel = Model(optimizer_with_attributes(ECOS.Optimizer, \u0026quot;printlevel\u0026quot; =\u0026gt; 0))\r@variable(model, t[1:n])\r@variable(model, x[1:n])\r@objective(model, Max, sum(t))\r@constraint(model, sum(x) == 1.0)\r@constraint(model, A * x .\u0026lt;= b )\r# Cannot use the exponential cone directly in JuMP, hence we use MOI to specify the set.\r@constraint(model, con[i = 1:n], [t[i], x[i], 1.0] in MOI.ExponentialCone())\roptimize!(model);\r Positive Semidefinite Cone The set of Positive Semidefinite Matrices of dimension $n$ form a cone in $\\mathbb{R}^n$. We write this set mathematically as:\n$$ S^n_+ = \\{ X \\in S^n : z ^\\top X z \\ge 0 , \\forall z \\in \\mathbb{R}^n\\}$$\nA PSD cone is represented in JuMP using the MOI sets PositiveSemidefiniteConeTriangle (for upper triangle of a PSD matrix) and PositiveSemidefiniteConeSquare (for a complete PSD matrix). However, it is preferable to use the PSDCone shortcut as illustrated below.\nExample: Largest Eigenvalue of a Symmetrix Matrix Suppose $A$ has eigenvalues $\\lambda_1 \\ge \\lambda_2 \\ge \\dotso \\ge \\lambda_n$. Then the matrix $tI - A$ has eigenvalues $ t - \\lambda_1$, $t - \\lambda_2$, $\\dotso$, $t - \\lambda_n$. Note that $t I - A$ is PSD exactly when all these eigenvalues are non-negative, and this happends for values $t \\ge \\lambda_1$. Thus, we can model the problem of fiding the largest eigenvalue of a symmetrix matrix as:\n$$ \\begin{align} \u0026amp; \\lambda_1 = \\max t\\\\\n\\text{s.t. } \u0026amp; tI - A \\succeq 0 \\end{align}$$\nusing LinearAlgebra\rusing SCS\rA = [3 2 4;\r2 0 2;\r4 2 3]\rmodel = Model(optimizer_with_attributes(SCS.Optimizer, \u0026quot;verbose\u0026quot; =\u0026gt; 0))\r@variable(model, t)\r@objective(model, Min, t)\r@constraint(model, t .* Matrix{Float64}(I, 3, 3) - A in PSDCone())\roptimize!(model)\r Which give us $\\lambda_1 = 8$.\nOther Cones and Functions For other cones supported by JuMP, check out the MathOptInterface Manual. A good resource for learning more about functions which can be modelled using cones is the MOSEK Modeling Cookbook. Also Check this link to find out all the different solvers and their supported problem types\nMixed - Integer Conic example Suppose we have a drone which we want to fly avoiding obstacles, how can we model and compute the optimal trajectory?\n\r\rAvoiding Obstacles\r\r\rLet $(x(t),y(t))_{t \\in [0,1]}$ represent the position at each time $t \\in [0,1]$.\n Step 1: Discretize time intro intervals $0 = T_1 \u0026lt; T_2 \u0026lt; \\dotso \u0026lt; T_N = 1$ and then describe position by polynomials $\\{ p_i : [T_i, T_{i+1}] - \u0026gt; \\mathbb{R}^2\\}_{i=1}^{N}$ such that:  $$(x(t), y(t)) = p_i(t) \\quad t \\in [T_i,T_{i+1}] $$\n  Step 2: \u0026ldquo;Safe polyhedrons\u0026rdquo; $P^r = \\{ x \\in \\mathbb{R}^2 : A^r x \\le b^r\\}$ such that: $$ \\forall i, \\exists r \\text{ s.t } p_i(t) \\in P^r \\quad t \\in [T_i, T_{i+1}] $$\n $p_i(t) \\in P^r \\implies q_{i,r}(t) \\ge 0 \\quad \\forall t$ Sum-of-Squares (SOS): $$ q_{i,r}(t) = \\sum_{j}r_j^2 \\text{ where } r_j(t) \\text{ is a polynomial function}$$ Boyund degree of polynomials: SDP.    Using JuMP.jl, PolyJuMP.jl, SumOfSquares.jl, MI-SDP Solver Pajarito.jl for a 9 region, 8 time steps problem, we get optimal \u0026ldquo;smoothness\u0026rdquo; in 651 seconds as shown in the picture above.\nWhile for 60 horizontal segments \u0026amp; obstacle every 5: Optimal \u0026ldquo;clicks\u0026rdquo; in 80 seconds.\n\r\rAvoiding Obstacles\r\r\r\rCheck more here\nContinuous solver?  The Hypatia.jl solver: conic interior point algorithms and interfaces (Chris Coey, MIT)  \rA homogeneous interior-point solver for non - symmetric cones Versatility \u0026amp; performance = More Cones  Two dozen predefined standard and exotic cones: e.g SDP, Sum-of-Squares and \u0026ldquo;Matrix\u0026rdquo; Sum-of-Squares for convexity/shape constraints.   Customizable: \u0026ldquo;Bring your own barrier\u0026rdquo; = \u0026quot; Bring your own cone\u0026quot; Take advantage of Natural formulations. Take advantage of Julia: multi-precision arithmetic, abstract linear operators, etc.   Modeling with new and nonsymmetric cones (Lea Kapelevich, MIT) Tulip.jl: An interior-point LP solver with abstract linear algebra (Mathieu Tanneau, Polytechnique Montréal) \rSet Programming with JuMP (Benoît Legat, UC Louvain) JuliaMoments (Tillmann Weisser, Los Alamos National Laboratory) -Dual of Sum-of-Squares  ","date":1596835405,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596835405,"objectID":"6349b783d5ca7f4f65a8995e580dd93f","permalink":"https://danpereda.github.io/post/conicopt/","publishdate":"2020-08-07T17:23:25-04:00","relpermalink":"/post/conicopt/","section":"post","summary":"Here I will describe a bit about conic programming on Julia based on Juan Pablo Vielma\u0026rsquo;s JuliaCon 2020 talk and JuMP devs Tutorials. We will begin by defining what is a cone and how to model them on JuMP together with some simple examples, by the end we will solve an mixed - integer conic problem of avoiding obstacles by following a polynomial trajectory.","tags":["JuliaCon 2020"],"title":"Conic Optimization on Julia","type":"post"},{"authors":[],"categories":[],"content":"","date":1596178628,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596178628,"objectID":"111b6d56e56f3facecaa145646e68d50","permalink":"https://danpereda.github.io/project/icovidchile/","publishdate":"2020-07-31T02:57:08-04:00","relpermalink":"/project/icovidchile/","section":"project","summary":"","tags":[],"title":"ICOVIDChile","type":"project"},{"authors":[],"categories":[],"content":"Here is what I\u0026rsquo;ve learned from the WorkShop Doing Scientific Machine Learning (SciML) With Julia from Chris Rackauckas. There is also an MIT course and Workshop exercises (with solutions) by the same author about this subject that I\u0026rsquo;ve been checking out and strongly recomend.\nTable of Contents  Modeling with Differential Equations  Differential Equations Stochastic Differential Equations Delayed Differential Equations Callbacks   Automated model discovery via universal differential equations  Parameter inference on differential equations  Local and global optimization Bayesian optimization   Neural Ordinary Differential Equations with sciml_train  Solving for the Lokta - Volterra model with few data. Universal ODEs learn and extrapolate other dynamical behaviors Transforming a neural network fit into equations in sparsified from using SInDy     Solving differential equations with neural networks (physics-informed neural networks)  Toy example Solving a 100 Dimensional Hamilton-Jacobi-Bellman Equation    Modeling with Differential Equations Differential Equations First we will see how to define a differential Equation on Julia, for this we will use the Latka Volterra equation that modelates a population of rabbits and wolves.\n$$ \\dfrac{dx}{dt} = \\alpha x - \\beta xy$$ $$ \\dfrac{dy}{dt} = \\delta xy - \\gamma y$$\nSomething that may be silly but I find really nice is that you can write special caracters like 🐰, 🐺, α, β, γ and δ.\nWe just need to charge the package DifferentialEquations.jl and write our differential equation as a function.\nusing DifferentialEquations function lotka_volterra!(du,u,p,t) 🐰,🐺 = u α,β,γ,δ = p du[1] = d🐰 = α*🐰 - β*🐰*🐺 du[2] = d🐺 = γ*🐰*🐺 - δ*🐺 end u₀ = [1.0,1.0] tspan = (0.0, 10.0) p = [1.5,1.0,3.0,1.0] prob = ODEProblem(lotka_volterra!,u₀,tspan,p) sol = solve(prob)  \r\rLokta- Volterra Solution\r\r\r\r\rRabbit vs Wolves\r\r\rEasy optimizations can be made, we can choose a better solver for the problem, stop saving everystep, etc.\nusing Sundials # Charge CVODE_BDF() solver sol = solve(prob, CVODE_BDF(), save_everystep=false, abstol=1e-8, reltol=1e-8)  We can also change the parameters by using the remake function.\nremake(prob, p =[1.2,0.8,2.5,0.8])  Stochastic Differential Equation Now we have a multiplicative noise, given by the terms $\\sigma_i x_i dW_i$ where $dW_i$ is a random number whos standard deviation is $dt$. $$ dx = (\\alpha x - \\beta xy)dt + \\sigma_1 x dW_1 $$ $$ dy = (\\delta xy - \\gamma y)dt + \\sigma_2 y dW_2$$\nIn julia we just need create the multiplicative noise function and added to the previous problem by using SDEProblem instead of ODEProblem.\nfunction multiplicative_noise!(du,u,p,t) 🐰,🐺 = u du[1] = 0.3*🐰 du[2] = 0.3*🐺 end prob = SDEProblem(lotka_volterra!,multiplicative_noise!,u₀,tspan,p) sol = solve(prob)  Solving only once would not be the best, since we have a randomness, thus we made use of another set of functions already implemented in DifferentialEquations.jl called Ensemble. Firstly we ensemble the problem, secondly we solve for a given number of trajectories (aditonal parameters like EnsembleThreads can be written in order to parelalize the problem and get aditional performance) and finally we do a summary of what happened.\nensembleprob = EnsembleProblem(prob) sol = solve(ensembleprob, SOSRI(), EnsembleThreads(), trajectories=1000) summ = EnsembleSummary(sol)  \r\rSimple Summary\r\r\r\rClick here to see more about Ensemble\nDelayed Differential Equations The amount of growth happening at time $t$ is not due to the amount of rabbits at time $t$\n\r\rDelayed Differential Equation\r\r\rPopulation Control Example, whenever the amount of wolves is equal to $3$ then we are allow to kill one. The key feature to do this Callbacks. So whenever a condition happens, then it affects the dynamics.\n🔥🐺_condition(u,t,integrator) = u[2] - 3 🔥🐺_affect!(integrator) = integrator.u[2] -=1 🔥🐺_cb = ContinuousCallback(🔥🐺_condition,🔥🐺_affect!) sol = solve(prob, callback = 🔥🐺_cb)  \r\rPopulation Control\r\r\rOf course this is not the most realistic model, since we don\u0026rsquo;t instanstly kill a wolf each time.\nAutomated model discovery via universal differential equations Parameter inference on differential equations Our goal will be to find parameters that make the Lotka-Volterra solution the one we had on the first part, so we define our loss as the squared distance from our the real solution dataset = Array(sol) with parameters $p$ given by $\\alpha = 1.5$, $\\beta = 1.0$, $\\gamma = 3.0$ and $\\delta = 1.0$. Note that when using sciml_train, the first return is the loss value, and the other returns are sent to the callback for monitoring convergence.\nfunction loss(p) tmp_prob = remake(prob, p = p) tmp_sol = solve(tmp_prob, saveat = 0.1) sum(abs2, Array(tmp_sol) - dataset), tmp_sol end  Lastly, we use the sciml_train function to train the parameters using BFGS to arrive at parameters which optimize for our goal.\nusing DiffEqFlux using Optim pinit = [1.2,0.8,2.5,0.8] res = DiffEqFlux.sciml_train(loss, pinit, BFGS(), maxiters = 100) p_final = res.minimizer  sciml_train allows defining a callback that will be called at each step of our training loop. It takes in the current parameter vector and the returns of the last call to the loss function. We will display the current loss and make a plot of the current situation.\nusing Flux function plot_callback(p,l,tmp_sol) tmp_prob = remake(prob, p = p) tmp_sol = solve(tmp_prob, saveat = 0.1) fig = plot(tmp_sol) scatter!(fig, sol.t,dataset') display(fig) false end  Let\u0026rsquo;s optimize the model and get a nice animation of what is happening in each iteration:\nres = DiffEqFlux.sciml_train(loss, pinit, BFGS(), cb = plot_callback, maxiters=300) p_final = res.minimizer  In just $1.745$ seconds and $8658251$ allocations: 361.20 MiB (counting plots) we get a loss function of $2.401364 \\times 10^{-23}$ and parameters: $$\\alpha = 1.5000000000009583 \\approx 1.5$$ $$\\beta = 1.0000000000008002 \\approx 1.0$$ $$\\gamma = 3.0000000000005405 \\approx 3.0$$ $$\\delta = 0.9999999999995174 \\approx 1.0$$\n\rClick here to see more\nNotice that the election of BFGS makes us converge quickier than using ADAM (try this yourself). Usually ADAM its pretty good for the first iterations to get local optima but then its better to change to BFGS to do the final steps. Otherwise we can use BlackBoxOptim to get global optima algorithms.\nusing BlackBoxOptim res = DiffEqFlux.sciml_train(loss, pinit, DiffEqFlux.BBO(), cb = plot_callback, lower_bounds= 0.5ones(4), upper_bounds=4.0ones(4) )  After $48690$ steps we get best candidate found: $[1.5, 1.0, 3.0, 1.0]$\nBayesian Inference In this section we will use Turing.jl together with the documentation Click here to see more.\nMost of the scientific community deals with the basic problem of trying to mathematically model the reality around them and this often involves dynamical systems. The general trend to model these complex dynamical systems is through the use of differential equations. Differential equation models often have non-measurable parameters. The popular “forward-problem” of simulation consists of solving the differential equations for a given set of parameters, the “inverse problem” to simulation, known as parameter estimation, is the process of utilizing data to determine these model parameters. Bayesian inference provides a robust approach to parameter estimation with quantified uncertainty.\nFirst we set up all the packages that will be use together with a fix seed for reproducibility of the results.\nusing Turing, Distributions, DataFrames, DifferentialEquations, DiffEqSensitivity # Import MCMCChain, Plots, and StatsPlots for visualizations and diagnostics. using MCMCChains, Plots, StatsPlots # Set a seed for reproducibility. using Random Random.seed!(12);  We will keep using the same Lotka-Volerra equation and we’ll generate the data to use for the parameter estimation from simulation.\nodedata = Array(solve(prob,Tsit5(),saveat=0.1))  Turing and DifferentialEquations are completely composable and you can write of the differential equation inside a Turing @model and it will just work.\nWe can rewrite the Lotka Volterra parameter estimation problem with a Turing @model interface as below\nTuring.setadbackend(:forward_diff) #Small Model @model function fitlv(data) σ ~ InverseGamma(2, 3) α ~ truncated(Normal(1.5,0.5),0.5,2.5) β ~ truncated(Normal(1.2,0.5),0,2) γ ~ truncated(Normal(3.0,0.5),1,4) δ ~ truncated(Normal(1.0,0.5),0,2) p = [α,β,γ,δ] prob = ODEProblem(lokta_volterra!,u₀,tspan,p) predicted = solve(prob,Tsit5(),saveat=0.1) for i = 1:length(predicted) data[:,i] ~ MvNormal(predicted[i], σ) #Maximum Likehood Estimation end end model = fitlv(odedata) chain = sample(model, NUTS(.65),10000)  We just give our prior distribution and solve the dynamics to calcule our predictions and then compare it with the data in a maximum likehood estimation.\nNeural Ordinary Differential Equations with sciml_train First, lets generate the data\nusing DiffEqFlux, OrdinaryDiffEq, Flux, Optim, Plots u0 = Float32[2.0; 0.0] datasize = 30 tspan = (0.0f0, 1.5f0) tsteps = range(tspan[1], tspan[2], length = datasize) function trueODEfunc(du, u, p, t) true_A = [-0.1 2.0; -2.0 -0.1] du .= ((u.^3)'true_A)' end prob_trueode = ODEProblem(trueODEfunc, u0, tspan) ode_data = Array(solve(prob_trueode, Tsit5(), saveat = tsteps))  Second, we create a neural network that represents some idea we know about the system.\ndudt2 = FastChain((x, p) -\u0026gt; x.^3, FastDense(2, 50, tanh), FastDense(50, 2))  What the neural network is just a mathematical function with the right parameters, what the code is doing is just writting:\n$ Wx^3 \\rightarrow Wx^3 + b \\rightarrow tanh(Wx^3+b)$ $\\rightarrow W_2 tanh(Wx^3+b) \\rightarrow W_2 tanh(Wx^3+b) + b_2 $\nNote: For large neural networks its recommended to use Flux instead of DiffEqFlux.\nNow we can write the ODEProblem and solve it.\nneural_ode_f(u,p,t) = dudt2(u,p) pinit = initial_params(dudt2) prob = ODEProblem(neural_ode_f,u0,(0.0f0,1.5f0),pinit) sol = solve(prob, saveat = tsteps)  \r\rNeural ODE\r\r\rAs we see the initial guess is not good, since we just try it to approximate by a random ODE. Then what we need to do its find the right parameters that describe the neural network such that matches the ODE well enough. Therefore we can do it as before:\nfunction loss(p) tmp_prob = remake(prob,p=p) tmp_sol = solve(tmp_prob,Tsit5(), saveat = tsteps) sum(abs2, Array(tmp_sol) - ode_data) end function neuralode_callback(p,l) tmp_prob = remake(prob,p=p) tmp_sol = solve(tmp_prob,Tsit5(), saveat = tsteps) fig = plot(tmp_sol) scatter!(fig,tsteps,ode_data') display(fig) false end DiffEqFlux.sciml_train(loss, pinit, ADAM(0.05), cb = neuralode_callback, maxiters = 500)  We get a loss value of $0.0678$. This can be optimize by using ADAM and then BFGS\nres = DiffEqFlux.sciml_train(loss, pinit, ADAM(0.05), cb = neuralode_callback, maxiters = 100) DiffEqFlux.sciml_train(loss, res.minimizer, BFGS(initial_stepnorm=0.01), maxiters = 100, cb = neuralode_callback)  Now we get a loss value of $ 1.591519 \\times 10^{-3}$.\nWe can see that most of the computational time is on the gradients. For instance Zygote.jl and Turing.jl take control over which algorithm is used in order to optimize performance, anyways we can always choose which one we want see DifferentialEquations.jl documentation on Sensitivity Algorithms for this matter.\n\rClick here to check more about Neural ODE on the SciML ecosystem.\nUniversal ODEs learn and extrapolate other dynamical behaviors Truth equation:\n$$ \\dot{x} = \\alpha x - \\beta xy$$ $$ \\dot{y} = \\gamma xy - \\delta y$$\nPartially-known neural embedded equations\n$$ \\dot{x} = \\alpha x - U_1(x,y)$$ $$ \\dot{y} = -\\delta y + U_2(x,y)$$\nAutomatically recover the long-term behaviour from less than half of a period in a cyclick time series!\nTurn neural networks back intro equations with SInDy.\nLet\u0026rsquo;s define the experimental parameter for the Lokta - Volterra equation.\ntspan = (0.0f0,3.0f0) u0 = Float32[0.44249296,4.6280594] p_ = Float32[1.3, 0.9, 0.8, 1.8] prob = ODEProblem(lotka, u0,tspan, p_) solution = solve(prob, Vern7(), abstol=1e-12, reltol=1e-12, saveat = 0.1)  \r\rFew data\r\r\rThen we add noise to the data so that we do not overfit.\nX = Array(solution) Xₙ = X + Float32(1e-3)*randn(eltype(X), size(X))  Define the neueral network which learns $L(x, y, y(t-\\tau))$. Actually, we do not care about overfitting right now, since we want to extract the derivative information without numerical differentiation.\nL = FastChain(FastDense(2, 32, tanh),FastDense(32, 32, tanh), FastDense(32, 2)) p = initial_params(L)  Let\u0026rsquo;s define now the neural network given by:\n$$ \\dot{x} = \\alpha x - U_1(x,y)$$ $$ \\dot{y} = -\\delta y + U_2(x,y)$$\nfunction dudt_(u, p,t) x, y = u z = L(u,p) [p_[1]*x + z[1], -p_[4]*y + z[2]] end  So then when we solve\nprob_nn = ODEProblem(dudt_,u0, tspan, p) sol_nn = concrete_solve(prob_nn, Tsit5(), u0, p, saveat = solution.t)  The thick curves represent the real solution, as we see, we get a decent predictor for only the first second, afterwards the prediction for $u_1(t)$ its pretty bad, while the prediction for $u_2(t)$ it\u0026rsquo;s ok.\n\r\rBad predictor\r\r\rLet\u0026rsquo;s improve now. For this we will do as before, we perfom a prediction and then compute a loss function on the prediction to check how well are we fitting the data. Finally we create a Callback that saves the losses each $50$ iterations.\nfunction predict(θ) Array(concrete_solve(prob_nn, Vern7(), u0, θ, saveat = solution.t, abstol=1e-6, reltol=1e-6, sensealg = InterpolatingAdjoint(autojacvec=ReverseDiffVJP()))) end function loss(θ) pred = predict(θ) sum(abs2, Xₙ .- pred), pred end const losses = [] callback(θ,l,pred) = begin push!(losses, l) if length(losses)%50==0 println(\u0026quot;Current loss after $(length(losses)) iterations: $(losses[end])\u0026quot;) end false end  First train with ADAM for better convergence adn then train with BFGS\nres1 = DiffEqFlux.sciml_train(loss, p, ADAM(0.01), cb=callback, maxiters = 200) res2 = DiffEqFlux.sciml_train(loss, res1.minimizer, BFGS(initial_stepnorm=0.01), cb=callback, maxiters = 10000)  \r\rlosses\r\r\rFinal training loss after $482$ iterations is $2.74 \\times 10^{-4}$ and the approximation fits the real solution really well.\n\r\rReal solution vs Approximation\r\r\rNotice that we purposely made the real solution curve thicker so that its easier to see, otherwise both curves are superposed.\nWe can also check the derivatives.\nDX = Array(solution(solution.t, Val{1})) prob_nn2 = ODEProblem(dudt_,u0, tspan, res2.minimizer) _sol = solve(prob_nn2, Tsit5()) DX_ = Array(_sol(solution.t, Val{1}))  \r\rDerivatives\r\r\rFinally, we know that the real functions are $\\beta xy$ and $\\gamma xy$. Lets check the error plot.\n# Ideal data L̄ = [-p_[2]*(X[1,:].*X[2,:])';p_[3]*(X[1,:].*X[2,:])'] # Neural network guess L̂ = L(Xₙ,res2.minimizer)  \r\rReal solution vs Approximation\r\r\rTransforming a neural network fit into equations in sparsified from using SInDy Now we want to use this nice fit and transformed back into equations. For this porpuse we\u0026rsquo;ll use ModelingToolkit.jl.\nWe will let the model know that we have $2$ variables and then create a basis that can approximate this functions by linear combinations of $sin(u_1)$ , $cos(u_1)$, $sin(u_2)$, $cos(u_2)$, $constant$, $u_1(t)^k$, $u_2(t)^k$ and $u_1(t)^k * u_2(t)^{5-k}$ with $k = 1\u0026hellip;5$\n@variables u[1:2] # Lots of polynomials polys = Operation[1] for i ∈ 1:5 push!(polys, u[1]^i) push!(polys, u[2]^i) for j ∈ i:5 if i != j push!(polys, (u[1]^i)*(u[2]^j)) push!(polys, u[2]^i*u[1]^i) end end end # And some other stuff h = [cos.(u)...; sin.(u)...; polys...] basis = Basis(h, u)  Now we will create an optimizer for the SINDY problem Check more about Sparse Identification of Nonlinear Dynamics\n# Create an optimizer for the SINDY problem opt = SR3() # Create the thresholds which should be used in the search process λ = exp10.(-7:0.1:3) # Target function to choose the results from; x = L0 of coefficients and L2-Error of the model f_target(x, w) = iszero(x[1]) ? Inf : norm(w.*x, 2)  Let\u0026rsquo;s see what happens if we want to use pure SINDY, meaning we have no pior information, only the data generated by our neural network,i.e, we took the values of the differential equation through the time series, we run it on the neural network giving us the output $\\hat{L}$ and the $X$ is the input of the neural network, then we make SINDY transform this data into a system of equations using the basis.\nΨ = SInDy(Xₙ[:, :], DX[:, :], basis, λ, opt = opt, maxiter = 10000, f_target = f_target)  As a result we get : $$du_1 = \\beta sin(u_1) + \\alpha cos(u_2) + \\gamma u_1^2$$ $$du_2 = \\delta u_2 $$\ni.e, we failed, but remember that we didn\u0026rsquo;t use any pior information.\nTest on ideal derivative data for unknown function (not available).\nΨ = SInDy(Xₙ[:, 5:end], L̄[:, 5:end], basis, λ, opt = opt, maxiter = 10000, f_target = f_target)  This time we succeded as we recovered the missing terms of each equation.\n$$du_1 = \\beta u_1u_2 $$ $$du_2 = \\gamma u_1u_2 $$\nAnd we also succeded using derivative data.\n# Test on uode derivative data println(\u0026quot;SINDY on learned, partial, available data\u0026quot;) Ψ = SInDy(Xₙ[:, 2:end], L̂[:, 2:end], basis, λ, opt = opt, maxiter = 10000, normalize = true, denoise = true, f_target = f_target)  Now we can extract the parameters.\np̂ = parameters(Ψ) println(\u0026quot;First parameter guess : $(p̂)\u0026quot;) unknown_sys = ODESystem(Ψ) unknown_eq = ODEFunction(unknown_sys)  The equations are recovered, but the parameters may not be the best, we can start another sindy run to get closer to the ground truth.\n# Just the equations b = Basis((u, p, t)-\u0026gt;unknown_eq(u, [1.; 1.], t), u) # Retune for better parameters -\u0026gt; we could also use DiffEqFlux or other parameter estimation tools here. Ψf = SInDy(Xₙ[:, 2:end], L̂[:, 2:end], b, opt = STRRidge(0.01), maxiter = 100, convergence_error = 1e-18) # Succeed println(Ψf) p̂ = parameters(Ψf) println(\u0026quot;Second parameter guess : $(p̂)\u0026quot;) # Create function recovered_sys = ODESystem(Ψf) recovered_eq = ODEFunction(recovered_sys) # Build a ODE for the estimated system function dudt(du, u, p, t) # Add SInDy Term α, δ, β, γ = p z = recovered_eq(u, [β; γ], t) du[1] = α*u[1] + z[1] du[2] = -δ*u[2] + z[2] end # Create the approximated problem and solution ps = [p_[[1,4]]; p̂] approximate_prob = ODEProblem(dudt, u0, tspan, ps) approximate_solution = solve(approximate_prob, Tsit5(), saveat = 0.01) # Look at long term prediction t_long = (0.0, 50.0) approximate_prob = ODEProblem(dudt, u0, t_long, ps) approximate_solution_long = solve(approximate_prob, Tsit5(), saveat = 0.1) # Using higher tolerances here results in exit of julia true_prob = ODEProblem(lotka, u0, t_long, p_) true_solution_long = solve(true_prob, Tsit5(), saveat = approximate_solution_long.t)  Why are neural networks so good? because for large enough neural network, local optima are global optima.\n\rClick here to see more about Universal differential equations\nPhysics-Informed Neural Networks Solve and ODE with a neural network  Let $u' = f(u,t)$ with $u(0) = u_0$. We want to build a neural network $NN(t)$ that is the solution to this differential equation. By definition then, we must have that $NN'(t) = f(NN(t),t)$ and $NN(0) = u_0$. Define $\\mathcal{C}(\\theta) = \\displaystyle \\sum_{t} \\lVert NN'(t) - f(NN(t),t) \\rVert$ for $\\theta$ the parameters of the ODE.  Then this cost is zero when $NN(t)$ is the solution to the ODE Therefore we aim to minimize this loss to get the solution.   Extra trick: We can use $g(t) = tNN(t) + u_0$ as a test function instead of $NN(t)$. Notice that it is an approximator that always satisfies the boundary condition.  Example Let\u0026rsquo;s solve the ODE: $$u'(t) = cos(2\\pi t) = f(u,t)$$ with initial condition $$u(0) = 1$$\nFollowing the steps above, we create a neural network, a function $g(t)$ which we derivate and compute the $l_2$ norm of the difference between $g'(t)$ and $u'(t)$. In order to do this, we define $\\epsilon$ as small as the precision of a Float32 allow us.\nusing Flux NNODE = Chain( x -\u0026gt; [x], Dense(1,32,tanh), Dense(32,1), first) NNODE(1.0) g(t) = t*NNODE(t) + 1f0 using Statistics ϵ = sqrt(eps(Float32)) loss() = mean(abs2( ( ( g(t+ϵ) - g(t) )/ϵ ) - cos(2π*t) ) for t in 0f0:0.01f0:1f0)  We create a callback and train the neural network using a descent algorithm.\niter = 0 cb = function() global iter += 1 if iter % 500 == 0 display( loss() ) end end opt = Flux.Descent(0.01) data = Iterators.repeated( (), 5000 ) Flux.train!(loss, Flux.params(NNODE), data, opt; cb= cb)  Now we can compare to the real solution:\n$$ u(t) = \\int u'(t) dt = \\int cos(2\\pi t)dt = \\dfrac{sin(2\\pi t)}{2\\pi} + constant$$\nbut $u(0) = 1$ therefore we get $u(t) = 1 + \\dfrac{sin(2\\pi t)}{2\\pi}$\n\r\rTrue Solution vs Neural Network\r\r\rWhy Physics- Informed Neural Networks?\n $\\mathcal{C}(\\theta) = C_{pde}(\\theta) + C_{boundary} + C_{data}(\\theta)$ can nudge a model towards data.  Equivalent to regularizing the neural network by a scientific equation   Can train fast continuous surrogates by making the neural network parameter dependent.  Example: Solving a 100 Dimensional Hamilton-Jacobi-Bellman Equation For this problem we will use NeuralPDE.jl (\rCheck more here). Following this steps:\n Write the function and equation. Make $\\sigma^\\top \\nabla u (t,X)$ a neural network. Solve the resulting SDEs and learn $\\sigma^\\top \\nabla u$ via:   using NeuralPDE using Flux using DifferentialEquations using LinearAlgebra d = 100 # number of dimensions X0 = fill(0.0f0, d) # initial value of stochastic control process tspan = (0.0f0, 1.0f0) λ = 1.0f0 g(X) = log(0.5f0 + 0.5f0 * sum(X.^2)) f(X,u,σᵀ∇u,p,t) = -λ * sum(σᵀ∇u.^2) μ_f(X,p,t) = zero(X) # Vector d x 1 λ σ_f(X,p,t) = Diagonal(sqrt(2.0f0) * ones(Float32, d)) # Matrix d x d prob = TerminalPDEProblem(g, f, μ_f, σ_f, X0, tspan) hls = 10 + d # hidden layer size opt = Flux.ADAM(0.01) # optimizer # sub-neural network approximating solutions at the desired point u0 = Flux.Chain(Dense(d, hls, relu), Dense(hls, hls, relu), Dense(hls, 1)) # sub-neural network approximating the spatial gradients at time point σᵀ∇u = Flux.Chain(Dense(d + 1, hls, relu), Dense(hls, hls, relu), Dense(hls, hls, relu), Dense(hls, d)) pdealg = NNPDENS(u0, σᵀ∇u, opt=opt) @time ans = solve(prob, pdealg, verbose=true, maxiters=100, trajectories=100, alg=EM(), dt=1.2, pabstol=1f-2)  We can solve this high dimensional problem in only $22.623969$ seconds $523.95 M$ allocations: $36.683 GiB$, $17.95%$ gc time.\n","date":1596178587,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596783387,"objectID":"d9dae3dbd2e0d9facdc4570f95a7858c","permalink":"https://danpereda.github.io/post/scientificmachinelearning/","publishdate":"2020-07-31T02:56:27-04:00","relpermalink":"/post/scientificmachinelearning/","section":"post","summary":"Here is what I\u0026rsquo;ve learned from the WorkShop Doing Scientific Machine Learning (SciML) With Julia from Chris Rackauckas. There is also an MIT course and Workshop exercises (with solutions) by the same author about this subject that I\u0026rsquo;ve been checking out and strongly recomend.","tags":["JuliaCon 2020"],"title":"Scientific Machine Learning on Julia","type":"post"},{"authors":[],"categories":[],"content":"This is what I\u0026rsquo;ve learned from the workshop by David P. Sanders\nWe will simulate the dynamics of an epidemic, i.e, an outbreak of an infectious disease. In a population of people with N individuals we will be interested in how the number of susceptible (S), infectious (I) and recovered (R) individual changes over time. We will begin by looking at simple models that take into account only total numbers of people, by the end of the workshop we should be able to structure a more complicated individual - based or agent - based simulation, where we model individual people moving around space and interacting with one another.\nFor Simplicity, those individuals will be modelled as random walks on a grid, i.e, points that choose a neighbouring grid point at random to jump to.\nTable of Contents  Generic programming Composite types (Outer) constructors Generic programming with Types Types for agents Composition and Parametrised Types Spatial SIR model Dynamics  Generic programming: Random walks Each step roughly corresponds to a different function. Each different type of walker will need a different way to:\n initialize() itself and then move() which will return the new position chosen by the walker.  Therefore a walk of length T is given by the following function\nfunction walk(T)\rpos = initialize()\rtrajectory = [pos] # make a Vector that contains just the current value of `pos`\rfor t in 1:T\rnew_pos = move(pos)\rpush!(trajectory, new_pos) # append to the Vector\rpos = new_pos # update for next iteration\rend\rreturn trajectory\rend\r We noticed that this depends on the functions initialize() and move() that should be defined on the global scope. Since a random walk can be in n dimension, we would like to be able to run the same function of all dimension, this is what is called generic programming.\nfunction walk(initialize, move, T)\rpos = initialize()\rtrajectory = [pos]\rfor t in 1:T\rpos = move(pos) # *update* the value pointed to by `pos`\rpush!(trajectory, deepcopy(pos)) # at the cost of needing to copy `pos` when we store it if it is a vector\rend\rreturn trajectory\rend\r This way we can have different initialize() and move() functions depending on the dimension of the walker and we will be able to recover the trajectory calling the same walk function.\nNow the question is, how can we efficiently store information about each walker? we would like to now not only the trajectory but also if he is susceptible, infected or recovered. This leads us to the following section.\nComposite types The main idea is to collect up or aggregate all relevant information into a new data structure, called a composite type (or custom type, aggregate type, user-defined type, \u0026hellip;).\nBasically we want to be able to specify the \u0026ldquo;template\u0026rdquo; / \u0026ldquo;shape\u0026rdquo; / \u0026ldquo;structure\u0026rdquo; for a bag or box that will contain all the relevant information; this specification is the type itself. Then we need to produce objects which have that structure, i.e. which contain the corresponding variables; these are called instances.\nIn Julia this is accomplished using the struct keyword (short for \u0026ldquo;structure\u0026rdquo;). For example, we can make an object that contains the $x$ and $y$ coordinates of a walker in 2 dimensions as:\nstruct Walker2D\rx::Int64\ry::Int64\rend\r (Outer) constructors Suppose we want walkers to be born at the origin unless otherwise stated. We don\u0026rsquo;t want to have to write Walker2D(0, 0) each time; we would like to just write Walker2D(). In other words, we want to add a new method to the function Walker2D:\nWalker2D() = Walker2D(0, 0)\nSuch a constructor is called an outer constructor, since it lives outside the definition of the type.\nMaking walkers move We are not allowed to modify the fields of a walker because we defined the structure as being immutable (if we want it to be mutable we need to specify it). Usually this will give us better performance. So in order to make our walker move, we need to create a new object with the new position. This could seem expensive, but in fact the Julia compiler will often be able to completely remove this object creation and produce code that is just as efficient as if there were no object at all!\nSuppose we want to only move on the $ x - axis $ then we can just define:\nmove(w::Walker2D) = Walker2D(w.x + rand( (-1,1) ), w.y)\r Now supposed we need to defined a function that moves us to an adjacent point at random, then we can just throw a coin an choose a direction based on that result.\nfunction jump(w::Walker2D)\rr = rand()\rif r \u0026gt; 0.5\rreturn Walker2D(w.x + rand( (-1,1) ), w.y)\relse\rreturn Walker2D(w.x, w.y + rand( (-1,1) ) )\rend\rend\r Generic programming with Types Before we create a walk function that depends on the functions initialize() and move(), but what if we just have one of each function with different methods? this solution should be better, otherwise we would have to define functions initialize_1D() and initialize_2D() to pass it as an argument an make a distinction between 1 dimension and 2 dimension walkers.\n\u0026quot;Calculate the trajectory of a walker `w` for time `T`.\u0026quot;\rfunction walk(w, T)\rtrajectory = [w] # store the current (initial) position of `w`\rfor t in 1:T\rw = move(w) # update the value bound to `w`\rpush!(trajectory, deepcopy(w)) # store the current value\rend\rreturn trajectory\rend\r We have not specified a type of $w$ this means that if we have a move function that works for instance for Integer numbers (BigInt, Int64 and so on) it should work and it should also work if we have a Walker2D as an argument.\nTypes for agents We are getting towards our goal of putting everything together to make a model of people moving around and interacting with one another. Most people start off susceptible, but when an infectious person meets a susceptible the infection is transmitted with a certain probability.\nWe will make an individual-based model, also called an agent-based model. We need a struct called Agent that contains whatever information an agent needs. In our case we will need a position and an infection status.\nThe position will behave almost like a normal random walk that we have seen before, while the infection status needs to reflect whether the agent is susceptible (S), infectious (I) or recovered / removed (R).\nEnums We could represent the infection status simply using an integer, e.g. 0, 1 or 2. But then our code will be hard to read, since we will be comparing the infection status to numbers all the time without remembering which one is which.\nA nice solution is just to use @enums macro.\n@enum InfectionStatus S=1 I R # specify that `S` corresponds to the value 1\r We will have a new Type InfectionStatus, with possible values S, I and R that also store a numerical value $ S = 1 $, $ I = 2$ and $ R = 3$. Then we can do Int(I) and it will return the integer 2, we can also do\nstatus = I\rif status == I\rprintln(\u0026quot;infected!\u0026quot;)\rend\r and get infected! as a result. This way the InfectionStatus information gets easy to manipulate and remember in our code.\nComposition and Parametrised Types We can place one object inside another one.\nSuppose we have defined a SimpleWalker2D structure as follows.\nstruct SimpleWalker2D\rx::Int64\ry::Int64\rend\r Then we can define an Agent as:\nstruct Agent\rposition::SimpleWalker2D\rstatus::InfectionStatus\rend\r Then we can create an infected Agent in position $(1,2)$ by simply doing  w = SimpleWalker2D(1,2) and then a = Agent(w,I).\nAs we learned before, we would like to have our program a bit more generic. One way of doing it is by parametrizing Types:\nstruct Agent{T}\rposition::T\rstatus::InfectionStatus\rend\r Sometimes beeing too generic can cause troubles if not careful. Then we can parametrise for only some Types. Suppose there is a common abstract type AbstractWalker for all of the possible types that we want to be able to use for T (this can be 1,2 and 3 dimension walkers for example), then we can write:\nstruct Agent{T \u0026lt;: AbstractWalker}\rposition::T\rstatus::InfectionStatus\rend\r Spatial SIR model Now we are ready to build the spatial model. It will consist of walkers moving in a 2D box. This was an exercise left to the audience at the end of the talk, so we will solve it as it is written on the notebook.\nConfinement inside a box We need agents to live inside a box so that they don\u0026rsquo;t disperse.\nExercise  Make a ConfinedWalker2D type. Its fields are a Walker2D object and a box size, L.  struct Walker2D\rx::Int64\ry::Int64\rend\r struct ConfinedWalker2D\rw::Walker2D\rL::Int64\rend\r The important part here is that we just give the size of the box as a parameter. We do not do an inner constructor that checks if the position of the walker is inside the box. This is because inner constructors can be bothersome so we just need to keep in mind that we should check boundaries at some future function.\n Extend move to ConfinedWalker2D. If the walker tries to jump outside the box, i.e. outside the sites 1 to 𝐿 , in either direction, then it remains where it is.  function move(cw::ConfinedWalker2D)\rr = rand()\rstep= rand([-1,1])\rif r \u0026gt; 0.5\rposx = cw.w.x + step\rposy = cw.w.y\relse\rposx = cw.w.x\rposy = cw.w.y + step\rend\rif (posx \u0026lt;= cw.L)\u0026amp;\u0026amp; (1 \u0026lt;= posx)\u0026amp;\u0026amp;(posy \u0026lt;= cw.L)\u0026amp;\u0026amp; (1 \u0026lt;= posy)\rw = Walker2D(posx,posy)\rreturn ConfinedWalker2D(w, cw.L)\relse\rreturn cw\rend\rend\r  Make a confined Agent and calculate and draw its trajectory to make sure it stays inside the box.  struct Agent{T}\rcw::T\rstatus::InfectionStatus\rend\r Let\u0026rsquo;s consider $L = 6$ and initial position $(5,5)$\n\r\rTrajectory\r\r\rWe can see how it does not move outside the border and stays in the same position in the $16th$ move for example.\nInitialization Exercises  Write a function initialize that takes parameters 𝐿, the box length, and 𝑁, the number of agents. It builds, one by one, a Vector of agents, by proposing a position for each one and checking if that position is already occupied. If it is occupied, it should generate another one, and so on until it finds a free spot. All of the agents should have state S, except for one infectious individual (I).  To do this you should write a function check_occupied that checks if a particular position is occupied.\nfunction check_ocupied(w::Walker2D,v)\rm = length(v)\rif m == 0\rreturn false\relse\rfor i = 1:m\rif (w.x == v[i].cw.w.x) \u0026amp;\u0026amp; (w.y == v[i].cw.w.x)\rreturn true\rend\rend\rreturn false\rend\rend\r function initialize(L,N)\ri= 0\rv = []\rwhile i \u0026lt; N\rx = rand(-L:L)\ry = rand(-L:L)\rw = Walker2D(x,y)\rif !check_ocupied(w,v)\ra = Agent( ConfinedWalker2D(w,L), S)\rpush!(v,deepcopy(a))\ri = i+1\rend\rend\rindex = rand(1:N)\rv[index] = Agent(v[index].position,I)\rreturn v\rend\r  Write a function visualize_agents that takes in a collection of agents as argument. It should plot a point for each agent, coloured according to its status  function visualize_agents(v)\rm = length(v)\rx = SA[zeros(m)]\ry = SA[zeros(m)]\rinfection_status = []\rfor i = 1:m\rx[1][i] = v[i].cw.w.x\ry[1][i] = v[i].cw.w.y\rpush!(infection_status,deepcopy(Int(v[i].status)))\rend\rreturn scatter((x,y) , c = infection_status, ratio =1, leg = false)\rend\r  Run these functions to visualize the initial condition.  Let\u0026rsquo;s consider $L = 6$ and $N = 20$. Then we get the following:\n\r\rInitial condition\r\r\rDynamics Now we just need to simulate the dynamics of the system. We will consider parameters $p_l$ and $p_R$, the probabilities of infection and recovery at each time step, respectively. The system evolves as follows:\n First the system is initialized with only one random infected agent. Secondly, a single agent choosen randomly, call it $i$ tries to move to an adjancent position. If the position is ocuppied, by agent $j$, then neither of them move, but they interact as follows: If agent $i$ is infected and agent $j$ is susceptible then agent $j$ gets infected with probability $p_I$ If agent $i$ is infected, it recovers with probability $p_R$.  We do this part defining step() function\nNotice that this model does not allow a recovered agent to get infected again.\nThen the step! function looks as follows:\n\u0026quot;Receives a vector of agents and the required probabilities,\rreturns a modified agent vector\u0026quot;\rfunction step!(v, pI, pR)\rn = length(v)\ri = rand(1:n)\rcwi = move(v[i].cw) # we move agent i index = check_ocupied2(cwi.w,v) # Give us [] or the index j of agent\rm = length(index) # can be 0 or 1\rif m == 0\rv[i] = Agent(cwi, v[i].status)\relse\rfor j in index\rv[i],v[j] = infection(v[i],v[j], pI, pR)\rend\rend\rreturn v\rend\r Infection() function makes the interaction between the agents $i$ and $j$ following the previous rules.\nLet\u0026rsquo;s see how the system evolves after $1000$ steps. For this we will use $L = 6$ , $N = 30$, $p_I = 0.5$ and $p_R = 0.05$. Orange means infected, Blue is susceptible and Green is recovered.\n\r\rSystem Evolution\r\r\r\r\rSIR\r\r\rFinal thoughts This workshop and to be honest most of JuliaCon 2020 workshops were amazing, as you can learn so much. There is a known saying about Mathematicians being able to code and solve problems at the cost of doing a really long, slow and bad algorithm. Going to this workshops and trying to learn as much Julia as possible during JuliaCon is making me improve a lot in terms of coding and knowing the capabilities of the language, so I recomend checking the workshops videos on youtube\n","date":1595973432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596059832,"objectID":"2428ec7a948d62d1e37f65fbab8a7988","permalink":"https://danpereda.github.io/post/test/","publishdate":"2020-07-28T17:57:12-04:00","relpermalink":"/post/test/","section":"post","summary":"An overview of what I've learned from the workshop","tags":["JuliaCon 2020","COVID - 19"],"title":"Learn Julia via epidemic modelling","type":"post"},{"authors":[],"categories":null,"content":"","date":1575376251,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575376251,"objectID":"232776fc7bdd03b04c163d063335c065","permalink":"https://danpereda.github.io/talk/pgmo/","publishdate":"2019-12-03T20:32:51-04:00","relpermalink":"/talk/pgmo/","section":"talk","summary":"","tags":[],"title":"Bilevel optimization applied to strategic pricing in electricity markets and extension to markets with massive entry of renewable energies","type":"talk"}]