[{"authors":["admin"],"categories":null,"content":"I am a first year (cotutelle) PhD student in Engineering Sciences with specialization in Math Modeling at Universidad de Chile, √âcole centrale de Lille and Inria.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://danpereda.github.io/author/daniel-pereda/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/daniel-pereda/","section":"authors","summary":"I am a first year (cotutelle) PhD student in Engineering Sciences with specialization in Math Modeling at Universidad de Chile, √âcole centrale de Lille and Inria.","tags":null,"title":"Daniel Pereda","type":"authors"},{"authors":[],"categories":[],"content":"This is what I\u0026rsquo;ve learned from the workshop by David P. Sanders\nWe will simulate the dynamics of an epidemic, i.e, an outbreak of an infectious disease. In a population of people with N individuals we will be interested in how the number of susceptible (S), infectious (I) and recovered (R) individual changes over time. We will begin by looking at simple models that take into account only total numbers of people, by the end of the workshop we should be able to structure a more complicated individual - based or agent - based simulation, where we model individual people moving around space and interacting with one another.\nFor Simplicity, those individuals will be modelled as random walks on a grid, i.e, points that choose a neighbouring grid point at random to jump to.\nGeneric programming: Random walks Each step roughly corresponds to a different function. Each different type of walker will need a different way to:\n initialize() itself and then move() which will return the new position chosen by the walker.  Therefore a walk of length T is given by the following function\nfunction walk(T)\rpos = initialize()\rtrajectory = [pos] # make a Vector that contains just the current value of `pos`\rfor t in 1:T\rnew_pos = move(pos)\rpush!(trajectory, new_pos) # append to the Vector\rpos = new_pos # update for next iteration\rend\rreturn trajectory\rend\r We noticed that this depends on the functions initialize() and move() that should be defined on the global scope. Since a random walk can be in n dimension, we would like to be able to run the same function of all dimension, this is what is called generic programming.\nfunction walk(initialize, move, T)\rpos = initialize()\rtrajectory = [pos]\rfor t in 1:T\rpos = move(pos) # *update* the value pointed to by `pos`\rpush!(trajectory, deepcopy(pos)) # at the cost of needing to copy `pos` when we store it if it is a vector\rend\rreturn trajectory\rend\r This way we can have different initialize() and move() functions depending on the dimension of the walker and we will be able to recover the trajectory calling the same walk function.\nNow the question is, how can we efficiently store information about each walker? we would like to now not only the trajectory but also if he is susceptible, infected or recovered. This leads us to the following section.\nComposite types The main idea is to collect up or aggregate all relevant information into a new data structure, called a composite type (or custom type, aggregate type, user-defined type, \u0026hellip;).\nBasically we want to be able to specify the \u0026ldquo;template\u0026rdquo; / \u0026ldquo;shape\u0026rdquo; / \u0026ldquo;structure\u0026rdquo; for a bag or box that will contain all the relevant information; this specification is the type itself. Then we need to produce objects which have that structure, i.e. which contain the corresponding variables; these are called instances.\nIn Julia this is accomplished using the struct keyword (short for \u0026ldquo;structure\u0026rdquo;). For example, we can make an object that contains the $x$ and $y$ coordinates of a walker in 2 dimensions as:\nstruct Walker2D\rx::Int64\ry::Int64\rend\r (Outer) constructors Suppose we want walkers to be born at the origin unless otherwise stated. We don\u0026rsquo;t want to have to write Walker2D(0, 0) each time; we would like to just write Walker2D(). In other words, we want to add a new method to the function Walker2D:\nWalker2D() = Walker2D(0, 0)\nSuch a constructor is called an outer constructor, since it lives outside the definition of the type.\nMaking walkers move We are not allowed to modify the fields of a walker because we defined the structure as being immutable (if we want it to be mutable we need to specify it). Usually this will give us better performance. So in order to make our walker move, we need to create a new object with the new position. This could seem expensive, but in fact the Julia compiler will often be able to completely remove this object creation and produce code that is just as efficient as if there were no object at all!\nSuppose we want to only move on the $ x - axis $ then we can just define:\nmove(w::Walker2D) = Walker2D(w.x + rand( (-1,1) ), w.y)\r Now supposed we need to defined a function that moves us to an adjacent point at random, then we can just throw a coin an choose a direction based on that result.\nfunction jump(w::Walker2D)\rr = rand()\rif r \u0026gt; 0.5\rreturn Walker2D(w.x + rand( (-1,1) ), w.y)\relse\rreturn Walker2D(w.x, w.y + rand( (-1,1) ) )\rend\rend\r Generic programming with Types Before we create a walk function that depends on the functions initialize() and move(), but what if we just have one of each function with different methods? this solution should be better, otherwise we would have to define functions initialize_1D() and initialize_2D() to pass it as an argument an make a distinction between 1 dimension and 2 dimension walkers.\n\u0026quot;Calculate the trajectory of a walker `w` for time `T`.\u0026quot;\rfunction walk(w, T)\rtrajectory = [w] # store the current (initial) position of `w`\rfor t in 1:T\rw = move(w) # update the value bound to `w`\rpush!(trajectory, deepcopy(w)) # store the current value\rend\rreturn trajectory\rend\r We have not specified a type of $w$ this means that if we have a move function that works for instance for Integer numbers (BigInt, Int64 and so on) it should work and it should also work if we have a Walker2D as an argument, since we have already defined\nTypes for agents We are getting towards our goal of putting everything together to make a model of people moving around and interacting with one another. Most people start off susceptible, but when an infectious person meets a susceptible the infection is transmitted with a certain probability.\nWe will make an individual-based model, also called an agent-based model. We need a struct called Agent that contains whatever information an agent needs. In our case we will need a position and an infection status.\nThe position will behave almost like a normal random walk that we have seen before, while the infection status needs to reflect whether the agent is susceptible (S), infectious (I) or recovered / removed (R).\nEnums We could represent the infection status simply using an integer, e.g. 0, 1 or 2. But then our code will be hard to read, since we will be comparing the infection status to numbers all the time without remembering which one is which.\nA nice solution is just to use @enums macro.\n@enum InfectionStatus S=1 I R # specify that `S` corresponds to the value 1\r We will have a new Type InfectionStatus, with possible values S, I and R that also store a numerical value $ S = 1 $, $ I = 2$ and $ R = 3$. Then we can do Int(I) and it will return the integer 2, we can also do\nstatus = I\rif status == I\rprintln(\u0026quot;infected!\u0026quot;)\rend\r and get infected! as a result. This way the InfectionStatus information gets easy to manipulate and remember in our code.\nComposition and Parametrised Types We can place one object inside another one.\nSuppose we have defined a SimpleWalker2D structure as follows.\nstruct SimpleWalker2D\rx::Int64\ry::Int64\rend\r Then we can define an Agent as:\nstruct Agent\rposition::SimpleWalker2D\rstatus::InfectionStatus\rend\r Then we can create an infected Agent in position $(1,2)$ by simply doing  w = SimpleWalker2D(1,2) and then a = Agent(w,I).\nAs we learned before, we would like to have our program a bit more generic. One way of doing it is by parametrizing Types:\nstruct Agent{T}\rposition::T\rstatus::InfectionStatus\rend\r Sometimes beeing too generic can cause troubles if not careful. Then we can parametrise for only some Types. Suppose there is a common abstract type AbstractWalker for all of the possible types that we want to be able to use for T (this can be 1,2 and 3 dimension walkers for example), then we can write:\nstruct Agent{T \u0026lt;: AbstractWalker}\rposition::T\rstatus::InfectionStatus\rend\r Spatial SIR model Now we are ready to build the spatial model. It will consist of walkers moving in a 2D box. This was an exercise left to the audience at the end of the talk, so we will solve it as it is written on the notebook.\nConfinement inside a box We need agents to live inside a box so that they don\u0026rsquo;t disperse.\nExercise  Make a ConfinedWalker2D type. Its fields are a Walker2D object and a box size, L.  struct Walker2D\rx::Int64\ry::Int64\rend\r struct ConfinedWalker2D\rw::Walker2D\rL::Int64\rend\r The important part here is that we just give the size of the box as a parameter. We do not do an inner constructor that checks if the position of the walker is inside the box. This is because inner constructors can be bothersome so we just need to keep in mind that we should check boundaries at some future function.\n Extend move to ConfinedWalker2D. If the walker tries to jump outside the box, i.e. outside the sites 1 to ùêø , in either direction, then it remains where it is.  function move(cw::ConfinedWalker2D)\rr = rand()\rstep= rand([-1,1])\rif r \u0026gt; 0.5\rposx = cw.w.x + step\rposy = cw.w.y\relse\rposx = cw.w.x\rposy = cw.w.y + step\rend\rif (posx \u0026lt;= cw.L)\u0026amp;\u0026amp; (1 \u0026lt;= posx)\u0026amp;\u0026amp;(posy \u0026lt;= cw.L)\u0026amp;\u0026amp; (1 \u0026lt;= posy)\rw = Walker2D(posx,posy)\rreturn ConfinedWalker2D(w, cw.L)\relse\rreturn cw\rend\rend\r  Make a confined Agent and calculate and draw its trajectory to make sure it stays inside the box.  struct Agent{T}\rcw::T\rstatus::InfectionStatus\rend\r Let\u0026rsquo;s consider $L = 6$ and initial position $(5,5)$\n\r\rTrajectory\r\r\rWe can see how it does not move outside the border and stays in the same position in the $16th$ move for example.\nInitialization Exercises  Write a function initialize that takes parameters ùêø, the box length, and ùëÅ, the number of agents. It builds, one by one, a Vector of agents, by proposing a position for each one and checking if that position is already occupied. If it is occupied, it should generate another one, and so on until it finds a free spot. All of the agents should have state S, except for one infectious individual (I).  To do this you should write a function check_occupied that checks if a particular position is occupied.\nfunction check_ocupied(w::Walker2D,v)\rm = length(v)\rif m == 0\rreturn false\relse\rfor i = 1:m\rif (w.x == v[i].cw.w.x) \u0026amp;\u0026amp; (w.y == v[i].cw.w.x)\rreturn true\rend\rend\rreturn false\rend\rend\r function initialize(L,N)\ri= 0\rv = []\rwhile i \u0026lt; N\rx = rand(-L:L)\ry = rand(-L:L)\rw = Walker2D(x,y)\rif !check_ocupied(w,v)\ra = Agent( ConfinedWalker2D(w,L), S)\rpush!(v,deepcopy(a))\ri = i+1\rend\rend\rindex = rand(1:N)\rv[index] = Agent(v[index].position,I)\rreturn v\rend\r  Write a function visualize_agents that takes in a collection of agents as argument. It should plot a point for each agent, coloured according to its status  function visualize_agents(v)\rm = length(v)\rx = SA[zeros(m)]\ry = SA[zeros(m)]\rinfection_status = []\rfor i = 1:m\rx[1][i] = v[i].cw.w.x\ry[1][i] = v[i].cw.w.y\rpush!(infection_status,deepcopy(Int(v[i].status)))\rend\rreturn scatter((x,y) , c = infection_status, ratio =1, leg = false)\rend\r  Run these functions to visualize the initial condition.  Let\u0026rsquo;s consider $L = 6$ and $N = 20$. Then we get the following:\n\r\rInitial condition\r\r\rDynamics Now we just need to simulate the dynamics of the system. We will consider parameters $p_l$ and $p_R$, the probabilities of infection and recovery at each time step, respectively. This part will be posted in Part 2.\n","date":1595973432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596059832,"objectID":"2428ec7a948d62d1e37f65fbab8a7988","permalink":"https://danpereda.github.io/post/test/","publishdate":"2020-07-28T17:57:12-04:00","relpermalink":"/post/test/","section":"post","summary":"An overview of what I've learned from the workshop","tags":["JuliaCon 2020","COVID - 19"],"title":"Learn Julia via epidemic modelling Part 1","type":"post"},{"authors":[],"categories":null,"content":"","date":1575376251,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575376251,"objectID":"232776fc7bdd03b04c163d063335c065","permalink":"https://danpereda.github.io/talk/pgmo/","publishdate":"2019-12-03T20:32:51-04:00","relpermalink":"/talk/pgmo/","section":"talk","summary":"","tags":[],"title":"Bilevel optimization applied to strategic pricing in electricity markets and extension to markets with massive entry of renewable energies","type":"talk"}]